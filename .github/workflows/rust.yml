name: Rust

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  cleanup-cache:
    runs-on: ubuntu-latest

    permissions:
      actions: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Clear unneeded cache
        run: |
          unusedCacheKeys=$(gh cache list --json key --jq '.[].key|(if endswith("${{ hashFiles('Cargo.lock') }}") then null else . end)')

          set +e
          echo "Deleting caches..."
          for cacheKey in $unusedCacheKeys
          do
              gh cache delete $cacheKey
          done
          echo "Done"

        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  check:
    defaults:
      run:
        shell: bash

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - uses: actions/cache/restore@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-${{ runner.arch }}-check-cargo-${{ hashFiles('Cargo.lock') }}
    - name: Install Rust
      run: |
        which cargo || rm -rf $HOME/.rustup | rm -rf $HOME/.cargo | curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
        source $HOME/.cargo/env
    - name: Verify code using Clippy
      run: cargo clippy --verbose --release
    - name: Verify formatting
      run: cargo fmt --check --verbose

  build_linux_x86:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        toolchain:
          - stable
          - beta
          - nightly

    defaults:
      run:
        shell: bash

    steps:
    - uses: actions/checkout@v4
    - uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-${{ runner.arch }}-${{ matrix.toolchain }}-cargo-${{ hashFiles('Cargo.lock') }}
    - name: Install Rust
      run: |
        which cargo || rm -rf $HOME/.rustup | rm -rf $HOME/.cargo | curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
        source $HOME/.cargo/env
    - name: Set toolchain
      run: |
        rustup default ${{ matrix.toolchain }}
        rustup update ${{ matrix.toolchain }}
    - name: Build code on Linux x86
      run: cargo build --verbose --release
    - name: Run tests on Linux x86
      run: cargo test --verbose --release
    - uses: actions/upload-artifact@v4
      with:
        name: linux-esci-${{ matrix.toolchain }}
        path: target/release/esci

  build_windows_x86:
    runs-on: windows-latest

    strategy:
      matrix:
        toolchain:
          - stable
          - beta
          - nightly

    defaults:
      run:
        shell: bash

    steps:
    - uses: actions/checkout@v4
    - uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-${{ runner.arch }}-${{ matrix.toolchain }}-cargo-${{ hashFiles('Cargo.lock') }}
    - name: Install Rust
      run: |
        which cargo || rm -rf $HOME/.rustup | rm -rf $HOME/.cargo | curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
        export PATH="$HOME/.cargo/bin:$PATH"
    - name: Set toolchain
      run: |
        rustup default ${{ matrix.toolchain }}
        rustup update ${{ matrix.toolchain }}
    - name: Build code on Windows x86
      run: cargo build --verbose --release
    - name: Run tests on Windows x86
      run: cargo test --verbose --release
    - uses: actions/upload-artifact@v4
      with:
        name: windows-esci-${{ matrix.toolchain }}
        path: target/release/esci.exe
  
  build_linux_arm:
    runs-on: ubuntu-24.04-arm

    strategy:
      matrix:
        toolchain:
          - stable
          - beta
          - nightly

    defaults:
      run:
        shell: bash

    steps:
    - uses: actions/checkout@v4
    - uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-${{ runner.arch }}-${{ matrix.toolchain }}-cargo-${{ hashFiles('Cargo.lock') }}
    - name: Install Rust
      run: |
        which cargo || rm -rf $HOME/.rustup | rm -rf $HOME/.cargo | curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
        source $HOME/.cargo/env
    - name: Set toolchain
      run: |
        rustup default ${{ matrix.toolchain }}
        rustup update ${{ matrix.toolchain }}
    - name: Build code on Linux ARM
      run: cargo build --verbose --release
    - name: Run tests on Linux ARM
      run: cargo test --verbose --release
    - uses: actions/upload-artifact@v4
      with:
        name: linux-esci-${{ matrix.toolchain }}
        path: target/release/esci

  build_windows_arm:
    runs-on: windows-11-arm

    strategy:
      matrix:
        toolchain:
          - stable
          - beta
          - nightly

    defaults:
      run:
        shell: bash

    steps:
    - uses: actions/checkout@v4
    - uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-${{ runner.arch }}-${{ matrix.toolchain }}-cargo-${{ hashFiles('Cargo.lock') }}
    - name: Install Rust
      run: |
        which cargo || rm -rf $HOME/.rustup | rm -rf $HOME/.cargo | curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
        export PATH="$HOME/.cargo/bin:$PATH"
    - name: Set toolchain
      run: |
        $HOME/.cargo/bin/rustup default ${{ matrix.toolchain }}
        $HOME/.cargo/bin/rustup update ${{ matrix.toolchain }}
    - name: Build code on Windows ARM
      run: $HOME/.cargo/bin/cargo build --verbose --release
    - name: Run tests on Windows ARM
      run: $HOME/.cargo/bin/cargo test --verbose --release
    - uses: actions/upload-artifact@v4
      with:
        name: windows-esci-${{ matrix.toolchain }}
        path: target/release/esci.exe

  build_macos_silicon:
    runs-on: macos-latest

    strategy:
      matrix:
        toolchain:
          - stable
          - beta
          - nightly

    defaults:
      run:
        shell: bash

    steps:
    - uses: actions/checkout@v4
    - uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-${{ runner.arch }}-${{ matrix.toolchain }}-cargo-${{ hashFiles('Cargo.lock') }}
    - name: Install Rust
      run: |
        which cargo || rm -rf $HOME/.rustup | rm -rf $HOME/.cargo | curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
        source $HOME/.cargo/env
    - name: Set toolchain
      run: |
        rustup default ${{ matrix.toolchain }}
        rustup update ${{ matrix.toolchain }}
    - name: Build code on MacOS Silicon
      run: cargo build --verbose --release
    - name: Run tests on MacOS Silicon
      run: cargo test --verbose --release
    - uses: actions/upload-artifact@v4
      with:
        name: macos-silicon-esci-${{ matrix.toolchain }}
        path: target/release/esci

  build_macos_intel:
    runs-on: macos-13

    strategy:
      matrix:
        toolchain:
          - stable
          - beta
          - nightly

    steps:
    - uses: actions/checkout@v4
    - uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-${{ runner.arch }}-${{ matrix.toolchain }}-cargo-${{ hashFiles('Cargo.lock') }}
    - name: Install Rust
      run: |
        which cargo || rm -rf $HOME/.rustup | rm -rf $HOME/.cargo | curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
        source $HOME/.cargo/env
    - name: Set toolchain
      run: |
        rustup default ${{ matrix.toolchain }}
        rustup update ${{ matrix.toolchain }}
    - name: Build code on MacOS Intel
      run: cargo build --verbose --release
    - name: Run tests on MacOS Intel
      run: cargo test --verbose --release
    - uses: actions/upload-artifact@v4
      with:
        name: macos-intel-esci-${{ matrix.toolchain }}
        path: target/release/esci